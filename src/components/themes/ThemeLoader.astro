---

---

<script>
  import { default as Default } from "../../themes/default/default";
  import { default as MFWebsite } from "../../themes/mfwebsite/mfwebsite";
  import { SiteTheme } from "../../themes/theme";

  document.addEventListener("DOMContentLoaded", () => {
    initialize();
  });

  const THEMES: Record<string, SiteTheme> = {
    default: Default,
    mfwebsite: MFWebsite,
  };

  let currentTheme: SiteTheme | null = null;

  const initialize = () => {
    const theme = loadTheme();
    updateTheme(theme);
  };

  const loadTheme = () => {
    // Retrieves theme from local storage, with fallback to default theme.
    if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
      return localStorage.getItem("theme") as string;
    }
    return "default";
  };

  declare global {
    interface Window {
      updateTheme: (theme: string) => Promise<void>;
    }
  }

  (window as Window).updateTheme = async (theme: string) => {
    const newTheme = THEMES[theme];

    if (currentTheme) {
      currentTheme.unload();
    }

    if (newTheme) {
      currentTheme = newTheme;
      currentTheme.load();
    } else {
      console.log(
        `[Theme]: Error loading theme '${theme}' reverting to default.`
      );
      currentTheme = Default;
      currentTheme.load();
    }
  };
</script>
